#
# Libraries
#
snippet lib "Library" b
library ${1}
use $1.${2}
endsnippet

# Standard Libraries
snippet libs "IEEE Library" b
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
endsnippet

# Xilinx Library
snippet libx "Xilinx Library" b
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;
endsnippet

snippet gen "Generic port" b
Generic(
	$0
);
endsnippet

## Entity Declaration
snippet ent "Entity" b
entity ${1:`vim_snippets#Filename()`} is
Port(
	clk  : in std_logic;
	RstB : in std_logic;
	$0
);
End entity $1;
endsnippet

## Architecture
snippet arc "Architecture" b
architecture ${1:rtl} of ${2:`vim_snippets#Filename()`} is
Begin
$0
End architecture $1;
endsnippet

#
# Declarations
#
# std_logic
snippet st "std_logic" b
	signal ${1} : std_logic;
endsnippet

# std_logic_vector
snippet sv "std_logic_vector" b
	signal ${1} : std_logic_vector( ${2} downto 0);
endsnippet

# std_logic in
snippet ist "in std_logic" b
${1} : in std_logic;
endsnippet

# std_logic_vector in
snippet isv "in std_logic_vector" b
${1} : in std_logic_vector( ${2} downto 0);
endsnippet

# std_logic out
snippet ost "out std_logic" b
${1} : out std_logic;
endsnippet

# std_logic_vector out
snippet osv "out std_logic_vector" b
${1} : out std_logic_vector( ${2} downto 0);
endsnippet

#
# Process Statements
#
# register process
snippet rproc "Process" b
u_${1:rCnt} : Process(Clk, RstB)
Begin
	if( RstB='0' ) then
		$1 <= (others=>'0');
	elsif( rising_edge(Clk) ) then
		if( ${2} ) then
			$0
		else
			$1 <= $1;
		end if;
	end if;
End Process;
endsnippet

# wire process
snippet wproc "wire process" b
u_${1:fsm} : Process(${2:signal})
Begin
	$0
End Process;
endsnippet

#
# Control Statements
#
# if
snippet if "if statement" b
if( ${1} ) then
$0
end if;
endsnippet
# if-else
snippet ife "if-else statement" b
if( ${1} ) then
$0
else
end if;
endsnippet

# else
snippet el "else statement" b
else
$0
endsnippet

# elsif
snippet elif "elsif statement" b
elsif( ${1} ) then
$0
endsnippet

# case
snippet ca "case statement" b
case ${1} is
	$0
	when others =>
end case;
endsnippet

# when else
snippet whel "when-else" w
when ${1} else $0
endsnippet

snippet when "when on case" b
when ${1} =>
	$0
endsnippet
## Misc
# others
snippet oth "others => 0" w
(others => '${1:0}');
endsnippet

# vim:ft=snippets
